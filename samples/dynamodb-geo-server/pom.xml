<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.amazonaws</groupId>
	<artifactId>dynamodb-geo-server</artifactId>
	<packaging>war</packaging>
	<name>Amazon DynamoDB Geo Sample Server</name>
	<version>1.0.0</version>
	<description>Geo Library for Amazon DynamoDB Sample Server demonstrates usage 
	of the library for a cloud-backed mobile app development scenario.
	</description>
	<url>https://aws.amazon.com/dynamodb</url>

	<scm>
		<url>ssh://git.amazon.com:2222/pkg/GeoForDynamoDB</url>
	</scm>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>https://aws.amazon.com/apache2.0</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<properties>
		<aws-java-sdk.version>1.5.5</aws-java-sdk.version>
	</properties>

	<dependencies>
		<!-- The AWS SDK for Java, and its dependencies on libraries like Jackson, 
			are required -->
		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-java-sdk</artifactId>
			<version>${aws-java-sdk.version}</version>
		</dependency>

		<!-- JUnit is needed to compile the integration test classes -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.google.common.geometry</groupId>
			<artifactId>s2-geometry-java</artifactId>
			<version>1.0.0</version>
			<scope>system</scope>
			<systemPath>${basedir}/src/main/webapp/WEB-INF/lib/s2-geometry-java.jar
			</systemPath>
		</dependency>
		<dependency>
			<groupId>com.google.common</groupId>
			<artifactId>guava-r09</artifactId>
			<version>1.0.0</version>
			<scope>system</scope>
			<systemPath>${basedir}/src/main/webapp/WEB-INF/lib/guava-r09.jar
			</systemPath>
		</dependency>
		<dependency>
			<groupId>com.amazonaws.geo</groupId>
			<artifactId>dynamodb-geo</artifactId>
			<version>1.0.0</version>
			<scope>system</scope>
			<systemPath>${basedir}/src/main/webapp/WEB-INF/lib/dynamodb-geo-1.0.0.jar
			</systemPath>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<developers>
		<developer>
			<id>amazonwebservices</id>
			<organization>Amazon Web Services</organization>
			<organizationUrl>https://aws.amazon.com</organizationUrl>
			<roles>
				<role>developer</role>
			</roles>
		</developer>
	</developers>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.4</version>
					<configuration>
						<webXml>src/main/webapp/WEB-INF/web.xml</webXml>
						<warName>dynamodb-geo-server</warName>
						<webResources>
							<resource>
								<directory>resources</directory>
							</resource>
						</webResources>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.tomcat.maven</groupId>
					<artifactId>tomcat7-maven-plugin</artifactId>
					<version>2.2</version>
					<configuration>
						<!-- http port -->
						<port>9090</port>
						<!-- application path always starts with /-->
						<path>/</path>
						<!-- optional path to a context file -->
						<contextFile>${tomcatContextXml}</contextFile>
						<!-- optional system propoerties you want to add -->
                        <systemProperties>
							<!--
                            <AWS_ACCESS_KEY_ID>AKIAJBG2H2TJ5DSDOS6A</AWS_ACCESS_KEY_ID>
							<AWS_SECRET_KEY>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</AWS_SECRET_KEY> -->
							<AWS_ACCESS_KEY_ID>XXXXXXXXX</AWS_ACCESS_KEY_ID>
							<AWS_SECRET_KEY>YYYYYYYYY</AWS_SECRET_KEY>
							<PARAM1>geo-test</PARAM1>
							<PARAM2>us-east-1</PARAM2>
							<is_local>true</is_local>
                        </systemProperties>
						<!-- if you want to use test dependencies rather than only runtime -->
						<useTestClasspath>false</useTestClasspath>
						<!-- optional if you want to add some extra directories into the classloader -->
						<additionalClasspathDirs>
							<additionalClasspathDir></additionalClasspathDir>
						</additionalClasspathDirs>
					</configuration>

				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-gpg-plugin</artifactId>
				<executions>
					<execution>
						<id>sign-artifacts</id>
						<phase>verify</phase>
						<goals>
							<goal>sign</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>